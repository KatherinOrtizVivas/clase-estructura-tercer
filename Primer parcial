#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Definición de la estructura Jugador
typedef struct {
    int id;
    char nombre[30];
    int edad;
    char genero;
    char deporte[50];
} Jugador;

// Definición del nodo para la Cola FIFO
typedef struct NodoCola {
    Jugador jugador;
    struct NodoCola* siguiente;
} NodoCola;

// Definición de la estructura Cola FIFO
typedef struct {
    NodoCola* frente;
    NodoCola* final;
    int cantidad;
} Cola;

// Definición del nodo para la Pila LIFO
typedef struct NodoPila {
    Jugador jugador;
    struct NodoPila* siguiente;
} NodoPila;

// Definición de la estructura Pila LIFO
typedef struct {
    NodoPila* tope;
    int cantidad;
} Pila;

// Funciones para la Cola FIFO
Cola* crearCola();
void encolar(Cola* cola, Jugador jugador);
Jugador desencolar(Cola* cola);
void mostrarCola(Cola* cola);
int contarCola(Cola* cola);
bool estaColaVacia(Cola* cola);
void liberarCola(Cola* cola);

// Funciones para la Pila LIFO
Pila* crearPila();
void apilar(Pila* pila, Jugador jugador);
Jugador desapilar(Pila* pila);
void mostrarPila(Pila* pila);
bool estaPilaVacia(Pila* pila);
void liberarPila(Pila* pila);
// Funciones de validación
bool validarEdad(int edad);
bool validarGenero(Cola* cola, char genero);

// Funciones del sistema
void agregarJugador(Cola* cola);
void permitirParticipacion(Cola* cola, Pila* historial);
void deshacerParticipacion(Cola* cola, Pila* historial);

int main() {
    Cola* colaEspera = crearCola();
    Pila* historialParticipacion = crearPila();
    int opcion;

    do {
        printf("\n---  Torneo Deportivo ---\n");
        printf("1. Agregar jugador a la cola\n");
        printf("2. Mostrar jugadores en espera\n");
        printf("3. Contar jugadores en espera\n");
        printf("4. Permitir participación del siguiente jugador\n");
        printf("5. Mostrar  participantes\n");
        printf("6. Deshacer última participación\n");
        printf("7. Salir\n");
        printf("Ingrese su opción: ");
        scanf("%d", &opcion);
        getchar(); // Limpiar el buffer del newline

        switch (opcion) {
            case 1:
                agregarJugador(colaEspera);
                break;
            case 2:
                mostrarCola(colaEspera);
                break;
            case 3:
                printf("Número de jugadores en espera: %d\n", contarCola(colaEspera));
                break;
            case 4:
                permitirParticipacion(colaEspera, historialParticipacion);
                break;
            case 5:
                mostrarPila(historialParticipacion);
                break;
            case 6:
                deshacerParticipacion(colaEspera, historialParticipacion);
                break;
            case 7:
                printf("Saliendo del sistema. ¡Hasta luego!\n");
                break;
            default:
                printf("Opción inválida. Por favor, intente de nuevo.\n");
        }
    } while (opcion != 7);

    // Liberar la memoria al salir
    liberarCola(colaEspera);
    liberarPila(historialParticipacion);

    return 0;
}

// --- Implementación de la Cola FIFO ---
 Cola* crearCola() {
    Cola* cola = (Cola*)malloc(sizeof(Cola));
    if (!cola) {
        fprintf(stderr, "Error al crear la cola\n");
        exit(EXIT_FAILURE);
    }
    cola->frente = NULL;
    cola->final = NULL;
    cola->cantidad = 0;
    return cola;
}

void encolar(Cola* cola, Jugador jugador) {
    if (!validarEdad(jugador.edad)) {
        printf("El jugador %s no cumple con la edad mínima para participar.\n", jugador.nombre);
        return;
    }
    if (!validarGenero(cola, jugador.genero)) {
        printf("No se puede agregar a %s. La diferencia de género en la cola es mayor a 4.\n", jugador.nombre);
        return;
    }

     NodoCola* nuevoNodo = (NodoCola*)malloc(sizeof(NodoCola));
    if (!nuevoNodo) {
        fprintf(stderr, "Error al asignar memoria para el nodo de la cola\n");
        exit(EXIT_FAILURE);
    }
    nuevoNodo->jugador = jugador;
    nuevoNodo->siguiente = NULL;

    if (estaColaVacia(cola)) {
        cola->frente = nuevoNodo;
    } else {
        cola->final->siguiente = nuevoNodo;
    }
    cola->final = nuevoNodo;
    cola->cantidad++;
    printf("Jugador %s agregado a la cola de espera.\n", jugador.nombre);
}

Jugador desencolar(Cola* cola) {
    if (estaColaVacia(cola)) {
        fprintf(stderr, "La cola está vacía. No se puede desencolar.\n");
        Jugador jugadorVacio = {-1, "", 0, '\0', ""}; // Retornar un jugador "vacío"
        return jugadorVacio;
    }
    NodoCola* temp = cola->frente;
    Jugador jugador = temp->jugador;
    cola->frente = cola->frente->siguiente;
    if (cola->frente == NULL) {
        cola->final = NULL;
    }
    free(temp);
    cola->cantidad--;
    return jugador;
}

void mostrarCola(Cola* cola) {
    if (estaColaVacia(cola)) {
        printf("La cola de espera está vacía.\n");
        return;
    }
    printf("--- Jugadores en la cola de espera ---\n");
    NodoCola* actual = cola->frente;
    while (actual != NULL) {
        printf("ID: %d, Nombre: %s, Edad: %d, Género: %c, Deporte: %s\n",
                actual->jugador.id, actual->jugador.nombre, actual->jugador.edad,
                actual->jugador.genero, actual->jugador.deporte);
        actual = actual->siguiente;
    }
    printf("---------------------------------------\n");
}

int contarCola(Cola* cola) {
    return cola->cantidad;
}

bool estaColaVacia(Cola* cola) {
    return cola->frente == NULL;
}

void liberarCola(Cola* cola) {
    while (!estaColaVacia(cola)) {
        desencolar(cola);
    }
    free(cola);
}

// --- Implementación de la Pila LIFO ---
Pila* crearPila() {
    Pila* pila = (Pila*)malloc(sizeof(Pila));
    if (!pila) {
        fprintf(stderr, "Error al crear la pila\n");
        exit(EXIT_FAILURE);
    }
    pila->tope = NULL;
    pila->cantidad = 0;
    return pila;
}

void apilar(Pila* pila, Jugador jugador) {
    NodoPila* nuevoNodo = (NodoPila*)malloc(sizeof(NodoPila));
    if (!nuevoNodo) {
        fprintf(stderr, "Error al asignar memoria para el nodo de la pila\n");
        exit(EXIT_FAILURE);
    }
    nuevoNodo->jugador = jugador;
    nuevoNodo->siguiente = pila->tope;
    pila->tope = nuevoNodo;
    pila->cantidad++;
    printf("Jugador %s agregado al historial de participación.\n", jugador.nombre);
}

Jugador desapilar(Pila* pila) {
    if (estaPilaVacia(pila)) {
        fprintf(stderr, "El historial de participación está vacío. No se puede deshacer.\n");
        Jugador jugadorVacio = {-1, "", 0, '\0', ""}; // Retornar un jugador "vacío"
        return jugadorVacio;
    }
    NodoPila* temp = pila->tope;
    Jugador jugador = temp->jugador;
    pila->tope = pila->tope->siguiente;
    free(temp);
    pila->cantidad--;
    return jugador;
}

void mostrarPila(Pila* pila) {
    if (estaPilaVacia(pila)) {
        printf("El historial de participación está vacío.\n");
        return;
    }
    printf("--- Jugadores Participantes  ---\n");
    NodoPila* actual = pila->tope;
    while (actual != NULL) {
        printf("ID: %d, Nombre: %s, Edad: %d, Género: %c, Deporte: %s\n",
                actual->jugador.id, actual->jugador.nombre, actual->jugador.edad,
                actual->jugador.genero, actual->jugador.deporte);
        actual = actual->siguiente;
    }
    printf("-------------------------------------------------------------\n");
}

bool estaPilaVacia(Pila* pila) {
    return pila->tope == NULL;
}

void liberarPila(Pila* pila) {
    while (!estaPilaVacia(pila)) {
        desapilar(pila);
    }
    free(pila);
}

// --- Implementación de las funciones de validación ---
bool validarEdad(int edad) {
    return edad >= 15;
}

bool validarGenero(Cola* cola, char genero) {
    int hombres = 0;
    int mujeres = 0;
    NodoCola* actual = cola->frente;
    while (actual != NULL) {
        if (actual->jugador.genero == 'M' || actual->jugador.genero == 'm') {
            hombres++;
        } else if (actual->jugador.genero == 'F' || actual->jugador.genero == 'f') {
            mujeres++;
        }
        actual = actual->siguiente;
    }

    if (genero == 'M' || genero == 'm') {
        return (hombres - mujeres) < 4;
    } else if (genero == 'F' || genero == 'f') {
        return (mujeres - hombres) < 4;
    }
    return false; // Género inválido
}

// --- Implementación de las funciones del sistema ---
void agregarJugador(Cola* cola) {
    Jugador nuevoJugador;
    printf("\n--- Agregar Nuevo Jugador ---\n");
    printf("ID: ");
    scanf("%d", &nuevoJugador.id);
    getchar(); // Limpiar el buffer
    printf("Nombre completo: ");
    fgets(nuevoJugador.nombre, sizeof(nuevoJugador.nombre), stdin);
    nuevoJugador.nombre[strcspn(nuevoJugador.nombre, "\n")] = 0; // Eliminar el newline
    printf("Edad: ");
    scanf("%d", &nuevoJugador.edad);
    getchar();
    printf("Género (M/F): ");
    scanf("%c", &nuevoJugador.genero);
    getchar();
    printf("Deporte: ");
    fgets(nuevoJugador.deporte, sizeof(nuevoJugador.deporte), stdin);
    nuevoJugador.deporte[strcspn(nuevoJugador.deporte, "\n")] = 0;

    encolar(cola, nuevoJugador);
}

void permitirParticipacion(Cola* cola, Pila* historial) {
    if (estaColaVacia(cola)) {
        printf("No hay jugadores en espera para participar.\n");
        return;
    }
    Jugador jugadorParticipante = desencolar(cola);
    apilar(historial, jugadorParticipante);
    printf("El jugador %s ha comenzado a participar.\n", jugadorParticipante.nombre);
}

void deshacerParticipacion(Cola* cola, Pila* historial) {
    if (estaPilaVacia(historial)) {
        printf("No hay participaciones para deshacer.\n");
        return;
    }
    Jugador jugadorReincorporado = desapilar(historial);
    encolar(cola, jugadorReincorporado);
    printf("Se ha deshecho la última participación de %s. Vuelve a la cola de espera.\n", jugadorReincorporado.nombre);
} 
//Jhocelin Murillo Riascos y Katherine Ortiz Vivas
